import PropTypes from 'prop-types';

const colorPropType = PropTypes.oneOfType([
    PropTypes.oneOf([
        'primary',
        'secondary',
        'success',
        'danger',
        'warning',
        'info',
        'dark',
        'light',
    ]),
    PropTypes.string,
]);
const fallbackPlacementsPropType = PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.oneOf(['top', 'bottom', 'right', 'left']).isRequired),
    PropTypes.oneOf(['top', 'bottom', 'right', 'left']),
]);
const placementPropType = PropTypes.oneOf([
    'auto',
    'auto-start',
    'auto-end',
    'top-end',
    'top',
    'top-start',
    'bottom-end',
    'bottom',
    'bottom-start',
    'right-start',
    'right',
    'right-end',
    'left-start',
    'left',
    'left-end',
]);
const shapePropType = PropTypes.oneOfType([
    PropTypes.oneOf([
        'rounded',
        'rounded-top',
        'rounded-end',
        'rounded-bottom',
        'rounded-start',
        'rounded-circle',
        'rounded-pill',
        'rounded-0',
        'rounded-1',
        'rounded-2',
        'rounded-3',
    ]),
    PropTypes.string,
]);
const textColorsPropType = PropTypes.oneOfType([
    colorPropType,
    PropTypes.oneOf(['white', 'muted']),
    PropTypes.string,
]);
const triggerPropType = PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.oneOf(['hover', 'focus', 'click']).isRequired),
    PropTypes.oneOf(['hover', 'focus', 'click']),
]);

export { colorPropType, fallbackPlacementsPropType, placementPropType, shapePropType, textColorsPropType, triggerPropType };
//# sourceMappingURL=props.js.map
