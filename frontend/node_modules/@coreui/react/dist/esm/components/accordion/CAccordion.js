import { __rest } from '../../node_modules/tslib/tslib.es6.js';
import React, { forwardRef, useState } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../_virtual/index.js';
import { CAccordionContext } from './CAccordionContext.js';

const CAccordion = forwardRef((_a, ref) => {
    var { children, activeItemKey, alwaysOpen = false, className, flush } = _a, rest = __rest(_a, ["children", "activeItemKey", "alwaysOpen", "className", "flush"]);
    const [_activeItemKey, setActiveKey] = useState(activeItemKey);
    return (React.createElement("div", Object.assign({ className: classNames('accordion', { 'accordion-flush': flush }, className) }, rest, { ref: ref }),
        React.createElement(CAccordionContext.Provider, { value: { _activeItemKey, alwaysOpen, setActiveKey } }, children)));
});
CAccordion.propTypes = {
    activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    alwaysOpen: PropTypes.bool,
    children: PropTypes.node,
    className: PropTypes.string,
    flush: PropTypes.bool,
};
CAccordion.displayName = 'CAccordion';

export { CAccordion };
//# sourceMappingURL=CAccordion.js.map
