import { __rest } from '../../node_modules/tslib/tslib.es6.js';
import React, { forwardRef, useId, useRef, useContext, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../_virtual/index.js';
import { CAccordionContext } from './CAccordionContext.js';
import { CAccordionItemContext } from './CAccordionItemContext.js';

const CAccordionItem = forwardRef((_a, ref) => {
    var { children, className, id, itemKey } = _a, rest = __rest(_a, ["children", "className", "id", "itemKey"]);
    const uniqueId = useId();
    const _id = id !== null && id !== void 0 ? id : uniqueId;
    const _itemKey = useRef(itemKey !== null && itemKey !== void 0 ? itemKey : _id);
    const { _activeItemKey, alwaysOpen, setActiveKey } = useContext(CAccordionContext);
    const [visible, setVisible] = useState(Boolean(_activeItemKey === _itemKey.current));
    useEffect(() => {
        if (!alwaysOpen && visible) {
            setActiveKey(_itemKey.current);
        }
    }, [visible]);
    useEffect(() => {
        setVisible(Boolean(_activeItemKey === _itemKey.current));
    }, [_activeItemKey]);
    return (React.createElement("div", Object.assign({ className: classNames('accordion-item', className) }, rest, { ref: ref }),
        React.createElement(CAccordionItemContext.Provider, { value: { id: _id, setVisible, visible } }, children)));
});
CAccordionItem.propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
    itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
};
CAccordionItem.displayName = 'CAccordionItem';

export { CAccordionItem };
//# sourceMappingURL=CAccordionItem.js.map
