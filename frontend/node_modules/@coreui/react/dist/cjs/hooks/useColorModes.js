'use strict';

var React = require('react');

const getStoredTheme = (localStorageItemName) => typeof window !== 'undefined' && localStorage.getItem(localStorageItemName);
const setStoredTheme = (localStorageItemName, colorMode) => localStorage.setItem(localStorageItemName, colorMode);
const getPreferredColorScheme = (localStorageItemName) => {
    if (typeof window === 'undefined') {
        return 'light';
    }
    const storedTheme = getStoredTheme(localStorageItemName);
    if (storedTheme) {
        return storedTheme;
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
};
const setTheme = (colorMode) => {
    document.documentElement.dataset.coreuiTheme =
        colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : colorMode;
    const event = new Event('ColorSchemeChange');
    document.documentElement.dispatchEvent(event);
};
const useColorModes = (localStorageItemName = 'coreui-react-color-scheme') => {
    const [colorMode, setColorMode] = React.useState(getPreferredColorScheme(localStorageItemName));
    React.useEffect(() => {
        if (colorMode) {
            setStoredTheme(localStorageItemName, colorMode);
            setTheme(colorMode);
        }
    }, [colorMode]);
    React.useEffect(() => {
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
            const storedTheme = getStoredTheme(localStorageItemName);
            if (storedTheme !== 'light' && storedTheme !== 'dark' && colorMode) {
                setTheme(colorMode);
            }
        });
    });
    return {
        colorMode,
        isColorModeSet: () => Boolean(getStoredTheme(localStorageItemName)),
        setColorMode,
    };
};

exports.useColorModes = useColorModes;
//# sourceMappingURL=useColorModes.js.map
