'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var PropTypes = require('prop-types');
var index = require('../../_virtual/index.js');
var useForkedRef = require('../../hooks/useForkedRef.js');
require('@popperjs/core');
var Transition = require('../../node_modules/react-transition-group/esm/Transition.js');

const CTabPane = React.forwardRef((_a, ref) => {
    var { children, className, onHide, onShow, transition = true, visible } = _a, rest = tslib_es6.__rest(_a, ["children", "className", "onHide", "onShow", "transition", "visible"]);
    const tabPaneRef = React.useRef(null);
    const forkedRef = useForkedRef.useForkedRef(ref, tabPaneRef);
    return (React.createElement(Transition.default, { in: visible, nodeRef: tabPaneRef, onEnter: onShow, onExit: onHide, timeout: 150 }, (state) => (React.createElement("div", Object.assign({ className: index.default('tab-pane', {
            active: visible,
            fade: transition,
            show: state === 'entered',
        }, className) }, rest, { ref: forkedRef }), children))));
});
CTabPane.propTypes = {
    children: PropTypes.node,
    className: PropTypes.string,
    onHide: PropTypes.func,
    onShow: PropTypes.func,
    transition: PropTypes.bool,
    visible: PropTypes.bool,
};
CTabPane.displayName = 'CTabPane';

exports.CTabPane = CTabPane;
//# sourceMappingURL=CTabPane.js.map
