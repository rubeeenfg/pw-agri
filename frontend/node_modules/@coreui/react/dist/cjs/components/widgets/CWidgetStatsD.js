'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var PropTypes = require('prop-types');
var index = require('../../_virtual/index.js');
var CCard = require('../card/CCard.js');
var CCardBody = require('../card/CCardBody.js');
require('../card/CCardFooter.js');
require('../card/CCardGroup.js');
var CCardHeader = require('../card/CCardHeader.js');
require('../card/CCardImage.js');
require('../card/CCardImageOverlay.js');
require('../card/CCardLink.js');
require('../card/CCardSubtitle.js');
require('../card/CCardText.js');
require('../card/CCardTitle.js');
var CCol = require('../grid/CCol.js');
var props = require('../../props.js');

const CWidgetStatsD = React.forwardRef((_a, ref) => {
    var { className, chart, color, icon, values } = _a, rest = tslib_es6.__rest(_a, ["className", "chart", "color", "icon", "values"]);
    return (React.createElement(CCard.CCard, Object.assign({ className: className }, rest, { ref: ref }),
        React.createElement(CCardHeader.CCardHeader, { className: index.default('position-relative d-flex justify-content-center align-items-center', {
                [`bg-${color}`]: color,
            }) },
            icon,
            chart),
        React.createElement(CCardBody.CCardBody, { className: "row text-center" }, values &&
            values.map((value, index) => {
                return (React.createElement(React.Fragment, { key: index },
                    index % 2 !== 0 && React.createElement("div", { className: "vr" }),
                    React.createElement(CCol.CCol, null,
                        React.createElement("div", { className: "fs-5 fw-semibold" }, value.value),
                        React.createElement("div", { className: "text-uppercase text-body-secondary small" }, value.title))));
            }))));
});
CWidgetStatsD.propTypes = {
    chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    className: PropTypes.string,
    color: props.colorPropType,
    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    values: PropTypes.arrayOf(PropTypes.any),
};
CWidgetStatsD.displayName = 'CWidgetStatsD';

exports.CWidgetStatsD = CWidgetStatsD;
//# sourceMappingURL=CWidgetStatsD.js.map
