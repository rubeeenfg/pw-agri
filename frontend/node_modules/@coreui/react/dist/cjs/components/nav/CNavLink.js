'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var PropTypes = require('prop-types');
var index = require('../../_virtual/index.js');
var CLink = require('../link/CLink.js');
var CSidebarNavContext = require('../sidebar/CSidebarNavContext.js');
var useForkedRef = require('../../hooks/useForkedRef.js');
require('@popperjs/core');

const CNavLink = React.forwardRef((_a, ref) => {
    var { children, className, idx } = _a, rest = tslib_es6.__rest(_a, ["children", "className", "idx"]);
    const navLinkRef = React.useRef(null);
    const forkedRef = useForkedRef.useForkedRef(ref, navLinkRef);
    const { setVisibleGroup } = React.useContext(CSidebarNavContext.CSidebarNavContext);
    React.useEffect(() => {
        var _a;
        rest.active = (_a = navLinkRef.current) === null || _a === void 0 ? void 0 : _a.classList.contains('active');
        idx && rest.active && setVisibleGroup(idx);
    }, [rest.active, className]);
    return (React.createElement(CLink.CLink, Object.assign({ className: index.default('nav-link', className) }, rest, { ref: forkedRef }), children));
});
CNavLink.propTypes = {
    active: PropTypes.bool,
    as: PropTypes.elementType,
    children: PropTypes.node,
    className: PropTypes.string,
    disabled: PropTypes.bool,
    idx: PropTypes.string,
};
CNavLink.displayName = 'CNavLink';

exports.CNavLink = CNavLink;
//# sourceMappingURL=CNavLink.js.map
