'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var PropTypes = require('prop-types');
var index = require('../../_virtual/index.js');
var CSidebarNavContext = require('../sidebar/CSidebarNavContext.js');
var Transition = require('../../node_modules/react-transition-group/esm/Transition.js');

const isInVisibleGroup = (el1, el2) => {
    const array1 = el1.toString().split('.');
    const array2 = el2.toString().split('.');
    return array2.every((item, index) => item === array1[index]);
};
const CNavGroup = React.forwardRef((_a, ref) => {
    var { children, as: Component = 'li', className, compact, idx, toggler, visible } = _a, rest = tslib_es6.__rest(_a, ["children", "as", "className", "compact", "idx", "toggler", "visible"]);
    const [height, setHeight] = React.useState(0);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const navItemsRef = React.useRef(null);
    const { visibleGroup, setVisibleGroup } = React.useContext(CSidebarNavContext.CSidebarNavContext);
    const [_visible, setVisible] = React.useState(Boolean(visible || (idx && visibleGroup && isInVisibleGroup(visibleGroup, idx))));
    React.useEffect(() => {
        setVisible(Boolean(idx && visibleGroup && isInVisibleGroup(visibleGroup, idx)));
    }, [visibleGroup]);
    const handleTogglerOnCLick = (event) => {
        event.preventDefault();
        setVisibleGroup(_visible ? ((idx === null || idx === void 0 ? void 0 : idx.toString().includes('.')) ? idx.slice(0, idx.lastIndexOf('.')) : '') : idx);
        setVisible(!_visible);
    };
    const style = {
        height: 0,
    };
    const onEntering = () => {
        navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);
    };
    const onEntered = () => {
        setHeight('auto');
    };
    const onExit = () => {
        navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);
    };
    const onExiting = () => {
        var _a;
        // @ts-expect-error reflow is necessary to get correct height of the element
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        (_a = navItemsRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;
        setHeight(0);
    };
    const onExited = () => {
        setHeight(0);
    };
    const transitionStyles = {
        entering: { display: 'block', height: height },
        entered: { display: 'block', height: height },
        exiting: { display: 'block', height: height },
        exited: { height: height },
        unmounted: {},
    };
    const NavGroupItemsComponent = Component === 'li' ? 'ul' : 'div';
    return (React.createElement(Component, Object.assign({ className: index.default('nav-group', { show: _visible }, className) }, rest, { ref: ref }),
        toggler && (React.createElement("a", { className: "nav-link nav-group-toggle", href: "#", onClick: (event) => handleTogglerOnCLick(event) }, toggler)),
        React.createElement(Transition.default, { in: _visible, nodeRef: navItemsRef, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: 300 }, (state) => (React.createElement(NavGroupItemsComponent, { className: index.default('nav-group-items', {
                compact: compact,
            }), style: Object.assign(Object.assign({}, style), transitionStyles[state]), ref: navItemsRef }, children)))));
});
CNavGroup.propTypes = {
    as: PropTypes.elementType,
    children: PropTypes.node,
    className: PropTypes.string,
    compact: PropTypes.bool,
    idx: PropTypes.string,
    toggler: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
    visible: PropTypes.bool,
};
CNavGroup.displayName = 'CNavGroup';

exports.CNavGroup = CNavGroup;
//# sourceMappingURL=CNavGroup.js.map
