'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var PropTypes = require('prop-types');
var index = require('../../_virtual/index.js');
var CDropdownContext = require('./CDropdownContext.js');
var useForkedRef = require('../../hooks/useForkedRef.js');
var usePopper = require('../../hooks/usePopper.js');
var props = require('../../props.js');
var getNextActiveElement = require('../../utils/getNextActiveElement.js');
var isRTL = require('../../utils/isRTL.js');
var utils = require('./utils.js');

const CDropdown = React.forwardRef((_a, ref) => {
    var { children, alignment, as = 'div', autoClose = true, className, container, dark, direction, offset = [0, 2], onHide, onShow, placement = 'bottom-start', popper = true, popperConfig, portal = false, variant = 'btn-group', visible = false } = _a, rest = tslib_es6.__rest(_a, ["children", "alignment", "as", "autoClose", "className", "container", "dark", "direction", "offset", "onHide", "onShow", "placement", "popper", "popperConfig", "portal", "variant", "visible"]);
    const dropdownRef = React.useRef(null);
    const dropdownMenuRef = React.useRef(null);
    const forkedRef = useForkedRef.useForkedRef(ref, dropdownRef);
    const [dropdownToggleElement, setDropdownToggleElement] = React.useState(null);
    const [pendingKeyDownEvent, setPendingKeyDownEvent] = React.useState(null);
    const [_visible, setVisible] = React.useState(visible);
    const { initPopper, destroyPopper } = usePopper.usePopper();
    const dropdownToggleRef = React.useCallback((node) => {
        if (node) {
            setDropdownToggleElement(node);
        }
    }, []);
    const allowPopperUse = popper && typeof alignment !== 'object';
    const Component = variant === 'nav-item' ? 'li' : as;
    const computedPopperConfig = React.useMemo(() => {
        const defaultPopperConfig = {
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset,
                    },
                },
            ],
            placement: utils.getPlacement(placement, direction, alignment, isRTL.default(dropdownMenuRef.current)),
        };
        return Object.assign(Object.assign({}, defaultPopperConfig), (typeof popperConfig === 'function' ? popperConfig(defaultPopperConfig) : popperConfig));
    }, [offset, placement, direction, alignment, popperConfig]);
    React.useEffect(() => {
        if (visible) {
            handleShow();
        }
        else {
            handleHide();
        }
    }, [visible]);
    React.useEffect(() => {
        const toggleElement = dropdownToggleElement;
        const menuElement = dropdownMenuRef.current;
        if (allowPopperUse && menuElement && toggleElement && _visible) {
            initPopper(toggleElement, menuElement, computedPopperConfig);
        }
    }, [dropdownToggleElement]);
    React.useEffect(() => {
        if (pendingKeyDownEvent !== null) {
            handleKeydown(pendingKeyDownEvent);
            setPendingKeyDownEvent(null);
        }
    }, [pendingKeyDownEvent]);
    const handleHide = React.useCallback(() => {
        setVisible(false);
        const toggleElement = dropdownToggleElement;
        const menuElement = dropdownMenuRef.current;
        if (allowPopperUse) {
            destroyPopper();
        }
        toggleElement === null || toggleElement === void 0 ? void 0 : toggleElement.removeEventListener('keydown', handleKeydown);
        menuElement === null || menuElement === void 0 ? void 0 : menuElement.removeEventListener('keydown', handleKeydown);
        window.removeEventListener('mouseup', handleMouseUp);
        window.removeEventListener('keyup', handleKeyup);
        onHide === null || onHide === void 0 ? void 0 : onHide();
    }, [dropdownToggleElement, allowPopperUse, destroyPopper, onHide]);
    const handleKeydown = React.useCallback((event) => {
        if (dropdownMenuRef.current && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {
            event.preventDefault();
            const target = event.target;
            const items = [
                ...dropdownMenuRef.current.querySelectorAll('.dropdown-item:not(.disabled):not(:disabled)'),
            ];
            getNextActiveElement.default(items, target, event.key === 'ArrowDown', true).focus();
        }
    }, []);
    const handleKeyup = React.useCallback((event) => {
        if (autoClose === false) {
            return;
        }
        if (event.key === 'Escape') {
            handleHide();
            dropdownToggleElement === null || dropdownToggleElement === void 0 ? void 0 : dropdownToggleElement.focus();
        }
    }, [autoClose, handleHide]);
    const handleMouseUp = React.useCallback((event) => {
        if (!dropdownToggleElement || !dropdownMenuRef.current) {
            return;
        }
        if (dropdownToggleElement.contains(event.target)) {
            return;
        }
        if (autoClose === true ||
            (autoClose === 'inside' &&
                dropdownMenuRef.current.contains(event.target)) ||
            (autoClose === 'outside' &&
                !dropdownMenuRef.current.contains(event.target))) {
            setTimeout(() => handleHide(), 1);
            return;
        }
    }, [autoClose, dropdownToggleElement, handleHide]);
    const handleShow = React.useCallback((event) => {
        const toggleElement = dropdownToggleElement;
        const menuElement = dropdownMenuRef.current;
        if (toggleElement && menuElement) {
            setVisible(true);
            if (allowPopperUse) {
                initPopper(toggleElement, menuElement, computedPopperConfig);
            }
            toggleElement.focus();
            toggleElement.addEventListener('keydown', handleKeydown);
            menuElement.addEventListener('keydown', handleKeydown);
            window.addEventListener('mouseup', handleMouseUp);
            window.addEventListener('keyup', handleKeyup);
            if (event && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {
                setPendingKeyDownEvent(event);
            }
            onShow === null || onShow === void 0 ? void 0 : onShow();
        }
    }, [
        dropdownToggleElement,
        allowPopperUse,
        initPopper,
        computedPopperConfig,
        handleKeydown,
        handleMouseUp,
        handleKeyup,
        onShow,
    ]);
    const contextValues = {
        alignment,
        container,
        dark,
        dropdownMenuRef,
        dropdownToggleRef,
        handleHide,
        handleShow,
        popper: allowPopperUse,
        portal,
        variant,
        visible: _visible,
    };
    return (React.createElement(CDropdownContext.CDropdownContext.Provider, { value: contextValues }, variant === 'input-group' ? (React.createElement(React.Fragment, null, children)) : (React.createElement(Component, Object.assign({ className: index.default(variant === 'nav-item' ? 'nav-item dropdown' : variant, {
            'dropdown-center': direction === 'center',
            'dropup dropup-center': direction === 'dropup-center',
            [`${direction}`]: direction && direction !== 'center' && direction !== 'dropup-center',
        }, className) }, rest, { ref: forkedRef }), children))));
});
const alignmentDirection = PropTypes.oneOf(['start', 'end']);
CDropdown.propTypes = {
    alignment: PropTypes.oneOfType([
        alignmentDirection,
        PropTypes.shape({ xs: alignmentDirection.isRequired }),
        PropTypes.shape({ sm: alignmentDirection.isRequired }),
        PropTypes.shape({ md: alignmentDirection.isRequired }),
        PropTypes.shape({ lg: alignmentDirection.isRequired }),
        PropTypes.shape({ xl: alignmentDirection.isRequired }),
        PropTypes.shape({ xxl: alignmentDirection.isRequired }),
    ]),
    as: PropTypes.elementType,
    autoClose: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(['inside', 'outside']),
    ]),
    children: PropTypes.node,
    className: PropTypes.string,
    dark: PropTypes.bool,
    direction: PropTypes.oneOf(['center', 'dropup', 'dropup-center', 'dropend', 'dropstart']),
    offset: PropTypes.any, // TODO: find good proptype
    onHide: PropTypes.func,
    onShow: PropTypes.func,
    placement: props.placementPropType,
    popper: PropTypes.bool,
    popperConfig: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    portal: PropTypes.bool,
    variant: PropTypes.oneOf(['btn-group', 'dropdown', 'input-group', 'nav-item']),
    visible: PropTypes.bool,
};
CDropdown.displayName = 'CDropdown';

exports.CDropdown = CDropdown;
//# sourceMappingURL=CDropdown.js.map
